AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  An AWS lambda to automatically add SSM patch group tags

Metadata:
  AWS::ServerlessRepo::Application:
    Name: "lambda-tag-patch-group"
    Description: "An AWS lambda to automatically add SSM patch group tags"
    Author: "Sage-Bionetworks"
    SpdxLicenseId: "Apache-2.0"
    # paths are relative to .aws-sam/build directory
    LicenseUrl: "LICENSE"
    ReadmeUrl: "README.md"
    Labels: ["serverless", "ssm", "tags"]
    HomePageUrl: "https://github.com/Sage-Bionetworks-IT/lambda-tag-patch-group"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Parameters:
  Schedule:
    Description: >-
      Schedule to execute the lambda, can be a rate or a cron schedule. Format at
      https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html
    Type: String
    Default: cron(0 2 * * ? *)  # Run at 2am every night
    ConstraintDescription: "Use schedule format: https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html"

Resources:
  TaggerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: .
      Handler: tagger/app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt FunctionRole.Arn
      Events:
        Schedule:
          # More info about Event Source:
          # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
          Type: Schedule
          Properties:
            Schedule: !Ref Schedule
            # JSON data passed to the lambda function as 'event',
            # The resource types need to match `ResourceTypeFilters` at
            # https://github.com/Sage-Bionetworks-IT/organizations-infra/blob/master/org-formation/090-systems-manager/patch-resource-group.yaml
            Input: |-
              {
                "tags": {
                  "ManagedInstanceMaintenanceTarget": "yes",
                  "PatchGroup": "prod-default"
                },
                "resource_types": [
                  "dms:rep",
                  "ec2:instance",
                  "ec2:reserved-instances",
                  "ecs:container-instance",
                  "opsworks:stack",
                  "rds:db",
                  "rds:ri",
                  "sagemaker:notebook-instance",
                  "ssm:managed-instance"
                ]
              }
  FunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowTagging
            Effect: Allow
            Resource: '*'
            Action:
              - dms:*Tag*
              - ec2:*Tag*
              - ecs:*Tag*
              - opsworks:*Tag*
              - rds:*Tag*
              - sagemaker:*Tag*
              - ssm:*Tag*
              - tag:GetResources
              - tag:TagResources

  FunctionRole:   # execute lambda function with this role
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref FunctionPolicy

Outputs:
  TaggerFunctionArn:
    Description: "Tagger Lambda Function ARN"
    Value: !GetAtt TaggerFunction.Arn
  TaggerFunctionRoleArn:
    Description: "Implicit IAM Role created for Tagger function"
    Value: !GetAtt FunctionRole.Arn
